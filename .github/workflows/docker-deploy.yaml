name: Build and Deploy Docker Image

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: deploy-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      pr_update: ${{ steps.set_type.outputs.pr_update }}
      pr_close: ${{ steps.set_type.outputs.pr_close }}
      main_push: ${{ steps.set_type.outputs.main_push }}
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
      host: ${{ steps.set_host.outputs.host }}
      container_name: ${{ steps.set_container_name.outputs.container_name }}

    steps:
      - name: Set PR_UPDATE, PR_CLOSE and MAIN_PUSH ‚öôÔ∏è
        id: set_type
        run: |
          # echo "pr_update=$('${{ github.event_name }}' == 'pull_request' && '${{github.event.action}}' != 'closed')" >> $GITHUB_OUTPUT
          ["${{ github.event_name }}" == "pull_request"] && ["${{github.event.action}}" != "closed"] && echo "pr_update=true" >> $GITHUB_OUTPUT
          ["${{ github.event_name }}" == "pull_request"] && ["${{github.event.action}}" == "closed"] && echo "pr_close=true" >> $GITHUB_OUTPUT
          ["${{ github.event_name }}" == "push"] && ["${{ github.ref }}" == "refs/heads/main"] && echo "main_push=true" >> $GITHUB_OUTPUT
          ["${{ github.event_name }}" == "push"] && ["${{ github.ref }}" == "refs/heads/main"] && echo "MAIN_PUSH=true" >> $GITHUB_ENV
          # echo "pr_close=$('${{ github.event_name }}' == 'pull_request' && '${{ github.event.action }}' == 'closed')" >> $GITHUB_OUTPUT
          # MAIN_PUSH=$('${{ github.event_name }}' == 'push' && '${{ github.ref }}' == 'refs/heads/main')
          # echo "main_push=$MAIN_PUSH" >> $GITHUB_OUTPUT
          # echo "MAIN_PUSH=$MAIN_PUSH" >> $GITHUB_ENV

      - name: Set IMAGE_TAG and CONTAINER_NAME ‚öôÔ∏è
        id: set_image_tag
        run: |
          if ${{ env.MAIN_PUSH }}; then
            echo "IMAGE_TAG=main" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=pr-${{ github.head_ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Set CONTAINER_NAME ‚öôÔ∏è
        id: set_container_name
        run: |
          if ${{ env.MAIN_PUSH }}; then
            echo "CONTAINER_NAME=forum" >> $GITHUB_OUTPUT
          else
            echo "CONTAINER_NAME=forum-pr-${{ github.head_ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Set Host ‚öôÔ∏è
        id: set_host
        run: |
          if ${{ env.MAIN_PUSH }}; then
            echo "HOST=forum.jeschek.eu" >> $GITHUB_OUTPUT
          else
            SANITIZED_TAG=$(echo "${{ github.head_ref }}" | sed 's/√§/ae/g; s/√º/ue/g; s/√∂/oe/g')
            echo "HOST=top22-$SANITIZED_TAG.jeschek.eu" >> $GITHUB_OUTPUT
          fi

  build_and_push:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.pr_update || needs.prepare.outputs.main_push
    environment: dockerhub
    env:
      IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}

    steps:
      - name: Checkout repository üõí
        uses: actions/checkout@v3

      - name: Log in to Docker Hub üîê
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx ‚öôÔ∏è
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image üèóÔ∏è
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/forum:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    environment: testing
    needs:
      - prepare
      # - build_and_push
    if: needs.prepare.outputs.pr_update || needs.prepare.outputs.main_push
    env:
      IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}
      HOST: ${{ needs.prepare.outputs.host }}
      CONTAINER_NAME: ${{ needs.prepare.outputs.container_name }}
      MAIN_PUSH: ${{ needs.prepare.outputs.main_push }}

    steps:
      - name: Setup SSH key üîë
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set DATABASE_URL ‚öôÔ∏è
        run: |
          if $MAIN_PUSH; then
            echo "DATA_SCHEMA=main" >> $GITHUB_ENV
          else
            username="${{ github.event.pull_request.user.login }}"
            DATABASE_SCHEMA="$(echo "$username" | tr -dc '[:alpha:]' | tr '[:upper:]' '[:lower:]')"
          fi
          echo "DATABASE_URL=postgresql://deploy:${{ secrets.DATABASE_PASSWORD }}@postgres:5432/top22?schema=$DATABASE_SCHEMA" >> $GITHUB_ENV

      - name: Deploy to VPS üöÄ
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 top22@${{ secrets.VPS_HOST }} "\
            sudo docker stop $CONTAINER_NAME || true && \
            sudo docker rm $CONTAINER_NAME || true && \
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/forum:$IMAGE_TAG || true && \
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/forum:$IMAGE_TAG && \
            sudo docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart always \
              --network=proxy_default \
              -e DATABASE_URL=${{ env.DATABASE_URL }} \
              -e VIRTUAL_HOST=$HOST \
              -e LETSENCRYPT_HOST=$HOST \
              -e LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/forum:$IMAGE_TAG && \
            sudo docker network connect db_default $CONTAINER_NAME"

  udpate_db:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - deploy
    if: needs.prepare.outputs.main_push
    env:
      CONTAINER_NAME: ${{ needs.prepare.outputs.container_name }}

    steps:
      - name: Update Database üìù
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 top22@${{ secrets.VPS_HOST }} "\
            (sudo docker exec $CONTAINER_NAME npx prisma db push --force-reset && \
            sudo docker exec $CONTAINER_NAME yarn testdata) || true"

  update_pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    needs:
      - prepare
      - deploy
    if: needs.prepare.outputs.pr_update
    env:
      HOST: ${{ needs.prepare.outputs.host }}

    steps:
      - name: Update Pull Request Description üìù
        uses: tzkhan/pr-update-action@v2
        continue-on-error: true
        with:
          head-branch-regex: ${{ github.head_ref }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          body-template: "[![.github/workflows/docker-deploy.yaml](https://github.com/top-22/forum/actions/workflows/docker-deploy.yaml/badge.svg)](https://$HOST)"
          body-update-action: prefix

  remove_container:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.pr_close
    env:
      IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}

    steps:
      - name: Setup SSH key üîë
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Remove container from VPS üóëÔ∏è
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 top22@${{ secrets.VPS_HOST }} "\
            sudo docker stop forum-pr-${{ github.head_ref }} || true && \
            sudo docker rm forum-pr-${{ github.head_ref }} || true && \
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/forum:IMAGE_TAG || true"

      - name: Remove image from Docker Hub üóëÔ∏è
        run: |
          TOKEN=$(
                  curl -s -H "Content-Type: application/json" -X POST \
                  -d "{\"username\": \"${{ secrets.DOCKERHUB_USERNAME }}\", \"password\": \"${{ secrets.DOCKERHUB_TOKEN }}\"}" \
                  https://hub.docker.com/v2/users/login/ | jq -r .token
                  )
          curl "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/forum/tags/$IMAGE_TAG/" \
                  -X DELETE \
                  -H "Authorization: JWT ${TOKEN}"
