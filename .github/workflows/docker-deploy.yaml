name: Build and Deploy Docker Image

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: deploy-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.action != 'closed') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: dockerhub

    steps:
      - name: Checkout repository üõí
        uses: actions/checkout@v3

      - name: Log in to Docker Hub üîê
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx ‚öôÔ∏è
        uses: docker/setup-buildx-action@v2

      - name: Set IMAGE_TAG ‚öôÔ∏è
        id: set_image_tag
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "IMAGE_TAG=main" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=pr-${{ github.head_ref }}" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image üèóÔ∏è
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/forum:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.action != 'closed') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    needs: build_and_push
    environment: testing
    outputs:
      host: ${{ steps.set_vars.outputs.host }}

    steps:
      - name: Setup SSH key üîë
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set IMAGE TAG, PORT, Database Schema and Hostname ‚öôÔ∏è
        id: set_vars
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "IMAGE_TAG=main" >> $GITHUB_ENV
            echo "PORT=3000" >> $GITHUB_ENV
            echo "DATA_SCHEMA=main" >> $GITHUB_ENV
            echo "host=forum.jeschek.eu" >> $GITHUB_OUTPUT
          else
            SANITIZED_TAG=$(echo "${{ github.head_ref }}" | sed 's/√§/ae/g; s/√º/ue/g; s/√∂/oe/g')
            echo "IMAGE_TAG=pr-$SANITIZED_TAG" >> $GITHUB_ENV
            echo "PORT=$((10000 + (${{ github.event.number }} % 100)))" >> $GITHUB_ENV
            username="${{ github.event.pull_request.user.login }}"
            DATABASE_SCHEMA="$(echo "$username" | tr -dc '[:alpha:]' | tr '[:upper:]' '[:lower:]')"
            echo "DATABASE_SCHEMA=$DATABASE_SCHEMA" >> $GITHUB_ENV
            echo "host=top22-$SANITIZED_TAG.jeschek.eu" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to VPS üöÄ
        run: |
          CONTAINER_NAME=forum-${{ env.IMAGE_TAG }}
          DATABASE_URL=postgresql://deploy:${{ secrets.DATABASE_PASSWORD }}@postgres:5432/top22?schema=${{ env.DATABASE_SCHEMA }} && \
          ssh -o StrictHostKeyChecking=no -p 22 top22@${{ secrets.VPS_HOST }} "\
            sudo docker stop $CONTAINER_NAME || true && \
            sudo docker rm $CONTAINER_NAME || true && \
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/forum:${{ env.IMAGE_TAG }} || true && \
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/forum:${{ env.IMAGE_TAG }} && \
            sudo docker run -d \
              --name $CONTAINER_NAME \
              --restart always \
              --network=proxy_default \
              -p ${{ env.PORT }}:3000 \
              -e DATABASE_URL=$DATABASE_URL \
              -e VIRTUAL_HOST=${{ steps.set_vars.outputs.host }} \
              -e LETSENCRYPT_HOST=${{ steps.set_vars.outputs.host }} \
              -e LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/forum:${{ env.IMAGE_TAG }} && \
            sudo docker network connect db_default $CONTAINER_NAME"

      - name: Update Database üìù
        run: |
          if [ "${{ env.IMAGE_TAG }}" == "main" ]; then
            ssh -o StrictHostKeyChecking=no -p 22 top22@${{ secrets.VPS_HOST }} "\
              (sudo docker exec forum-${{ env.IMAGE_TAG }} npx prisma db push --force-reset && \
              sudo docker exec forum-${{ env.IMAGE_TAG }} yarn testdata) || true"
          fi

  update_pr:
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.action != 'closed')
    needs: deploy

    steps:
      - name: Update Pull Request Description üìù
        uses: tzkhan/pr-update-action@v2
        continue-on-error: true
        with:
          head-branch-regex: ${{ github.head_ref }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          body-template: "[![.github/workflows/docker-deploy.yaml](https://github.com/top-22/forum/actions/workflows/docker-deploy.yaml/badge.svg)](https://${{ needs.deploy.outputs.host }})"
          body-update-action: prefix

  remove_container:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Setup SSH key üîë
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Remove container from VPS üóëÔ∏è
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 top22@${{ secrets.VPS_HOST }} "\
            sudo docker stop forum-pr-${{ github.head_ref }} || true && \
            sudo docker rm forum-pr-${{ github.head_ref }} || true && \
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/forum:pr-${{ github.head_ref }} || true"

      - name: Remove image from Docker Hub üóëÔ∏è
        run: |
          TOKEN=$(
                  curl -s -H "Content-Type: application/json" -X POST \
                  -d "{\"username\": \"${{ secrets.DOCKERHUB_USERNAME }}\", \"password\": \"${{ secrets.DOCKERHUB_TOKEN }}\"}" \
                  https://hub.docker.com/v2/users/login/ | jq -r .token
                  )
          IMAGE_TAG=pr-${{ github.head_ref }}
          curl "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/forum/tags/$IMAGE_TAG/" \
                  -X DELETE \
                  -H "Authorization: JWT ${TOKEN}"
